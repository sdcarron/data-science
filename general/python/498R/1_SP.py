# -*- coding: utf-8 -*-
#Check the current working directory
import os

print os.getcwd ()

#Set working directory to desired path
os.chdir ("Directory Path")

#Set the output directory (this directory holds the files generated by SP.py using the Twitter Stream API)
#These files represent the INITIAL tweets obtained when searching for suicide related terms/phrases
saveDirectory = os.path.join (os.getcwd (), "initialTweet_files")#"C:\Users\Steve\Desktop\dataScience\CS 498R\initialTweet_files"

#print os.getcwd ()


# -*- coding: utf-8 -*-
import tweepy
import json
import time

#This is needed for displaying Exception information in the "on_data" Method of "listener" Class
import sys

# This is my Twitter application data for authentication
#My cKey =
#Christophe's cKey = "CCCCCCCCCCCCCCCCCCCCCCCCC"
cKey = "SSSSSSSSSSSSSSSSSSSSSSSSS" #  #
#My cSecret = 
#Christophe's cSecret = "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC" 
cSecret = "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" #  # 
#My aToken = 
#Christophe's aToken = "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"
aToken = "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" #  # 
#My aSecret = 
#Christophe's aSecret = "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"
aSecret = "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" #  # 

# These are various filters

Thwarted_Belongingness = ["I did not have a satisfying social interaction today", "no social interaction today", "I feel disconnected",
                          "I feel alone", "I am alone", "I am not a support for others", "I am not helping anyone", "I am not helping anybody",
                          "There are no people I can turn to", "There is nobody I can turn to", "There is no one I can turn to", "Nobody cares about me",
                          "No one cares about me", "I don't have any friends", "I dont have any friends", "I have no friends", "I don't belong",
                          "I dont belong", "I'll never belong", "I will never belong", "I don't fit in", "I dont fit in", "I'll never fit in",
                          "I will never fit in", "I can't fit in", "I cant fit in", "I cannot fit in"]

Passive_Suicidal_Ideation = ["I wish I was dead", "I wish I were dead", "I wish I could die", "I would be better off dead", "I'd be better off dead"]

Suicide_Attempt = ["I attempted suicide", "I did attempt suicide", "I tried to kill myself", "I did try to kill myself"]

Suicide_Tags = ["#letmedie", "#killme", "#endmylife", "#letmylifeend", "#lifeisnotworthliving", "#suicide", "#suizid", "#suicidal",
                "#worthless", "#eraseme", "#endme", "#lifesucks", "#wanttodisappear", "#wanttodie", "#goodbyecruelworld", "#whocaresanymore",
                "#whocares", "#wealldiesomeday", "#godhatesme", "#crushed", "#heartbroken", "#broken", "#alone", "#hara-kiri", "#harakiri", "#crisis",
                "#attemptedsuicide", "#triedtokillmyselfK", "#suicideattempt", "#suicideattempts", "#selfharm", "#selfcutting", "#suicidalthoughts"]
                
                
Suicide_Research_Phrases = ["me abused depressed", "me hurt depressed", "feel hopeless depressed", "feel alone depressed", "I feel worthless", "I feel empty", "depressed alcohol",
                            "pills depressed", "suicide once more", "me abused suicide", "pain suicide", "I've tried suicide before", "mom suicide tried", "sister suicide tried",                          
                            "brother suicide tried", "friend suicide", "suicide attempted sister", "suicide thought about before", "thought suicide before", "had thoughts suicide",                          
                            "had thoughts killing myself", "used thoughts suicide", "once thought suicide", "past thoughts suicide", "multiple thoughts suicide", "I'm being bullied",                          
                            "I've been cyber bullied", "feel bullied I'm", "stop bullying me", "keeps bullying me", "always getting bullied", "gun suicide", "dad fight again",                          
                            "parents fight again"]
                            
Suicide_Research_Phrases_Encoded = [x.encode ("ascii", "ignore") for x in Suicide_Research_Phrases]

MAX_TWEETS_PER_FILE = 10

# This is the code to authenticate on Twitter

auth = tweepy.OAuthHandler(cKey, cSecret)
auth.set_access_token(aToken, aSecret)

# This is the code to get data from the Twitter Streaming API

class listener(tweepy.StreamListener):

    def __init__(self, fprefix = 'streamer'):
        self.counter = 0
        self.fprefix = fprefix
        self.outFile = self.fprefix + '.' + time.strftime('%Y%m%d-%H%M%S') + '.txt'
        self.completeFile = os.path.join(saveDirectory, self.outFile)       
        self.output  = open(self.completeFile, 'w')#fprefix + '.' + time.strftime('%Y%m%d-%H%M%S') + '.txt', 'w')

    def on_data(self, data):
        # Twitter returns data in JSON format - we need to decode it first
        decoded = json.loads(data)
        
        #Also we convert UTF-8 to ASCII ignoring all bad characters sent by users
        #'>' '\' and '|' have been added in to make parsing out the User name and Tweet Date straightforward in responseTweet.py
        #These are the attributes we want to pull for our tweets: X'coordinates', X'created_at', X'entities' -> ('hashtags', 'urls', and 'user_mentions'), X'favorite_count', X'favorited', X'filter_level', X'in_reply_to_screen_name', X'in_reply_to_status_id_str', X'in_reply_to_user_id_str', X'place' -> ('bounding_box' -> ('coordinates'), 'country', 'full_name'), 'quoted_status_id_str', 'scopes' -> ('followers'), 'retweet_count', 'text', and 'user' -> ('created_at', 'default_profile', 'default_profile_image', 'description', 'favourites_count', 'followers_count', 'friends_count', 'id_str', 'listed_count', 'name', 'screen_name', 'statuses_count')
        try:
            
            #if decoded['coordinates'] is not None and decoded['favorite_count'] is not None and decoded['favorited'] is not None and decoded['in_reply_to_screen_name'] is not None and decoded['in_reply_to_status_id_str'] is not None and decoded['in_reply_to_user_id_str'] is not None and decoded['place'] is not None and decoded['quoted_status_id_str'] is not None and decoded['entities']['hashtags'] is not None and decoded['entities']['urls'] is not None and decoded['entities']['user_mentions'] is not None and decoded['scopes']['followers'] is not None:
            #
            #    self.output.write('@' + decoded['user']['screen_name'] + '>'+ time.strftime ('%Y%m%d-%H%M%S') + '|' + '\t\t\tMessage ReplyScreenNameTarget: ' + decoded['in_reply_to_screen_name'] + '\t\t\tMessage ReplyUserIDTarget: ' + decoded['in_reply_to_user_id_str'] + '\t\t\tMessage ReplyStatusIDTarget: ' + decoded['in_reply_to_status_id_str'] + '\t\t\tMessage QuotedStatusIDStr: ' + decoded['quoted_status_id_str'] + '\t\t\tMessage ScopeFollowers: ' + str (decoded['scopes']['followers']) + '\t\t\tMessage RetweetCount: ' + str (decoded['retweet_count']) + '\t\t\tMessage Time: ' + decoded['created_at'] + '\t\t\tMessage Coordinates (Longitude,Latitude): ' + str (decoded ['coordinates'][0]) + ', ' + str (decoded['coordinates'][1])  + '\t\t\tMessage Location (Locale, Country): ' + decoded['place']['full_name'] + ', ' + decoded['place']['country'] + '\t\t\tMessage FavCount: ' + str (decoded['favorite_count']) + '\t\t\tMessage FavBool: ' + str (decoded['favorited']) + '\t\t\tMessage FilterLevel: ' + decoded['filter_level'].encode('ascii', 'ignore') + '\t\t\tMessage HashTags: ' + decoded['entities']['hashtags'].encode('ascii', 'ignore') + '\t\t\tMessage URLs: ' + decoded['entities']['urls'].encode('ascii', 'ignore') + '\t\t\tMessage Mentions: ' + decoded['entities']['user_mentions'].encode('ascii', 'ignore') + '\t\t\tMessage Text: ' + decoded['text'].encode('ascii', 'ignore') +  + '\n')
            #    self.counter += 1
            #    if self.counter >= MAX_TWEETS_PER_FILE:
            #        self.output.close()
            #        self.outFile = self.fprefix + '.' + time.strftime ('%Y%m%d-%H%M%S') + '.txt'
            #        self.completeFile = os.path.join (saveDirectory, self.outFile)
            #        self.output = open(self.completeFile, 'w')#self.fprefix + '.' + time.strftime('%Y%m%d-%H%M%S') + '.txt', 'w')
            #        self.counter = 0
            #        
            #else:
                
            currentOutputLine = '@' + decoded['user']['screen_name'] + '>' + time.strftime ('%Y%m%d-%H%M%S') + '|'
            
            currentOutputLine += '\t\t\tMessage ReplyScreenNameTarget: '
            
            if decoded['in_reply_to_screen_name'] is not None:
                
                currentOutputLine += decoded['in_reply_to_screen_name']
                
            else:
                
                currentOutputLine += 'NULL'
                
            
            
            currentOutputLine += '\t\t\tMessage ReplyUserIDTarget: '
            
            if decoded['in_reply_to_user_id_str'] is not None:
                
                currentOutputLine += decoded['in_reply_to_user_id_str']
                
            else:
                
                currentOutputLine += 'NULL'
                
                
                
            currentOutputLine += '\t\t\tMessage ReplyStatusIDTarget: '
            
            if decoded['in_reply_to_status_id_str'] is not None:
                
                currentOutputLine += decoded['in_reply_to_status_id_str']
                
            else:
                
                currentOutputLine += 'NULL'
                
            
            
            currentOutputLine += '\t\t\tMessage QuotedStatusIDStr: '
            
            #if decoded['quoted_status_id_str'] is not None:
                
            #    currentOutputLine += decoded['quoted_status_id_str']
                
            #else:
                
            currentOutputLine += 'NULL'
                
                
            
            currentOutputLine += '\t\t\tMessage ScopeFollowers: '
            
            #if decoded['scopes']['followers'] is not None:
                
            #    currentOutputLine += str (decoded['scopes']['followers'])
                
            #else:
                    
            currentOutputLine += 'NULL'
                
            
            
            
            currentOutputLine += '\t\t\tMessage RetweetCount: '
            
            if decoded['retweet_count'] is not None:
                
                currentOutputLine += str (decoded['retweet_count'])
                
            else:
                
                currentOutputLine += 'NULL'
                
                
            
            
            currentOutputLine += '\t\t\tMessage Time: '
            
            if decoded['created_at'] is not None:
                
                currentOutputLine += decoded['created_at']
                
            else:
                
                currentOutputLine += 'NULL'
            
            
            
            
            if decoded['coordinates'] is not None:
            
                currentOutputLine += '\t\t\tMessage Coordinates (Longitude,Latitude): ' + str (decoded ['coordinates'][0]) + ', ' + str (decoded['coordinates'][1])
            
            else:
                
                currentOutputLine += '\t\t\tMessage Coordinates (Longitude,Latitude): ' + 'NULL, NULL'
            
            
            
            
            if decoded['place'] is not None:
                
                currentOutputLine += '\t\t\tMessage Location (Locale, Country): ' + decoded['place']['full_name'] + ', ' + decoded['place']['country']
                
            else:
                
                currentOutputLine += '\t\t\tMessage Location (Locale, Country): ' + 'NULL, NULL'
                
                
            
            
            currentOutputLine += '\t\t\tMessage FavCount: '
            
            if decoded['favorite_count'] is not None:

                currentOutputLine +=  str (decoded['favorite_count'])
            
            else:
                
                currentOutputLine += 'NULL'
                
                
                
            currentOutputLine += '\t\t\tMessage FavBool: '
            
            if decoded['favorited'] is not None:
                
                currentOutputLine += str (decoded['favorited'])
                
            else:
                
                currentOutputLine += 'NULL'
            
            
            
            
            currentOutputLine += '\t\t\tMessage FilterLevel: '
            
            if decoded['filter_level'] is not None:
                
                currentOutputLine += decoded['filter_level']
                
            else:
                
                currentOutputLine += 'NULL'
            
            
            
            
            currentOutputLine += '\t\t\tMessage HashTags: '
            
            if decoded['entities']['hashtags'] is not None:
                
                for hashtag in decoded['entities']['hashtags']:
                
                    currentOutputLine += '\t' + 'Hashtag: #' + hashtag ['text']
                    
                    
            else:
                
                currentOutputLine += 'NULL'
                
                
                
            currentOutputLine += '\t\t\tMessage URLs: '
            
            #if decoded['entities']['urls'] is not None:
            #    
            #    for url in decoded['entities']['urls']:
            #        
            #        if url is not None:
            #    
            #            currentOutputLine += '\t' + 'URL: ' + url['expanded_url']
            #            
            #        else:
            #            
            #            currentOutputLine += '\t' + 'URL: NULL'
            #    
            #else:
                
            currentOutputLine += 'NULL'
                
                
                
            currentOutputLine += '\t\t\tMessage Mentions: '
            
            if decoded['entities']['user_mentions'] is not None:
                
                for mention in decoded['entities']['user_mentions']:
                
                    currentOutputLine += '\t' + 'Screen Name: ' + mention['screen_name'] + ' ' + 'User ID Str: '+ mention['id_str']
            
            else:
                
                currentOutputLine += 'NULL'
            
            
            
            currentOutputLine += '\t\t\tMessage Text: ' + decoded['text'].encode('ascii', 'ignore')
            
            
            
            
            
            
            #'user' -> (X'created_at', X'default_profile', X'default_profile_image', X'description', X'favourites_count', X'followers_count', X'friends_count', X'id_str', X'listed_count', X'name', X'screen_name', X'statuses_count')
            currentOutputLine += '\t\t\tMessage User: '
            
            
            
            
            currentOutputLine += '\tName {' 
            
            if decoded['user']['name'] is not None:
                
                currentOutputLine += decoded['user']['name'].encode('ascii', 'ignore') + '}'
            
            else:
                
                currentOutputLine += 'NULL}'
            
            
            
            
            currentOutputLine += '\tScreen Name {'
            
            if decoded['user']['screen_name'] is not None:
                
                currentOutputLine += decoded['user']['screen_name'].encode('ascii', 'ignore') + '}'
                
            else:
                
                currentOutputLine += 'NULL}'
                
            
            
            
            currentOutputLine += '\tID str {'
            
            if decoded['user']['id_str'] is not None:
                
                currentOutputLine += decoded['user']['id_str'] + '}'
                
            else:
                
                currentOutputLine += 'NULL}'
            
            
            
            
            currentOutputLine += '\tDescription {'
            
            if decoded['user']['description'] is not None:
                
                currentOutputLine += decoded['user']['description'].encode('ascii', 'ignore') + '}'
                
            else:
                
                currentOutputLine += 'NULL}'
                
                
                
                
            currentOutputLine += '\tHas Default Profile {'
            
            if decoded['user']['default_profile'] is not None:
                
                currentOutputLine += str (decoded['user']['default_profile']) + '}'
                
            else:
                
                currentOutputLine += 'NULL}'
                
            
            
            
            currentOutputLine += '\tHas Default Image {'
            
            if decoded['user']['default_profile_image'] is not None:
                
                currentOutputLine += str (decoded['user']['default_profile_image']) + '}'
                
            else:
                
                currentOutputLine += 'NULL}'
                
                
                
                
            currentOutputLine += '\tStatus Count {'
            
            if decoded['user']['statuses_count'] is not None:
                
                currentOutputLine += str (decoded['user']['statuses_count']) + '}'
                
            else:
                
                currentOutputLine += 'NULL}'
                
            
            
            
            currentOutputLine += '\tFavourites Count {'
            
            if decoded['user']['favourites_count'] is not None:
                
                currentOutputLine += str (decoded['user']['favourites_count']) + '}'
                
            else:
                
                currentOutputLine += 'NULL}'
                
                
            
            
            currentOutputLine += '\tFriends Count {'
            
            if decoded['user']['friends_count'] is not None:
                
                currentOutputLine += str (decoded['user']['friends_count']) + '}'
                
            else:
                
                currentOutputLine += 'NULL}'
                
                
                
                
            currentOutputLine += '\tFollowers Count {'
            
            if decoded['user']['followers_count'] is not None:
                
                currentOutputLine += str (decoded['user']['followers_count']) + '}'
                
            else:
                
                currentOutputLine += 'NULL}'
                
                
                
                
            currentOutputLine += '\tListed Count {'
            
            if decoded['user']['listed_count'] is not None:
                
                currentOutputLine += str (decoded['user']['listed_count']) + '}'
                
            else:
                
                currentOutputLine += 'NULL}'
                
                
                
                
            currentOutputLine += '\tTime Created: {'
            
            if decoded['user']['created_at'] is not None:
                
                currentOutputLine += decoded['user']['created_at'] + '}'
                
            else:
                
                currentOutputLine += 'NULL}'
                    
            
            
            
            self.output.write(currentOutputLine.encode('ascii', 'ignore') + '\n')
            self.counter += 1
            if self.counter >= MAX_TWEETS_PER_FILE:
                self.output.close()
                self.outFile = self.fprefix + '.' + time.strftime ('%Y%m%d-%H%M%S') + '.txt'
                self.completeFile = os.path.join (saveDirectory, self.outFile)
                self.output = open(self.completeFile, 'w')#self.fprefix + '.' + time.strftime('%Y%m%d-%H%M%S') + '.txt', 'w')
                self.counter = 0
                
                
            
        except Exception, e:
            
            print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)

        #else:   
            #Here I think is where we will search for Tweets TO (aka replies to/retweets of) "decoded ['user']['screen_name']" from the time that "decoded" was issued to X days after "decoded" was issued
            #We will output those tweets to the same file with the same approach (for each Tweet TO "decoded", increase counter by 1, and check counter > MAX_TWEETS_PER_FILE
            #I believe we will use this REST API documentation for guiding this process: https://dev.twitter.com/rest/public/search
            
        return True

    def on_error(self, status):
        print status

twitterStream = tweepy.Stream(auth, listener())

filter_keywords = Suicide_Research_Phrases#_Encoded #Suicide_Tags # Passive_Suicidal_Ideation
twitterStream.filter(track = filter_keywords)



# This is the code to get data from the Twitter REST API

#twitterRest = tweepy.API(auth)
#
#statuses = twitterRest.user_timeline("@ChristopheGC")
#print [s.text for s in statuses]

#results = twitterRest.search("#CDCchat")
#print len(results)
#print [s.text for s in results]

#stream.filter(follow=[38744894], track=['#pythoncentral'])
