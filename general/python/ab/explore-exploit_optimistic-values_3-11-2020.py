#3-11-2020 AI Reinforcement Learning - Udemy; Explore-Exploit Dilemma; Optimistic Initial Values
#NOTE Optimistic Intial Values algorithm is basically the same as Epsilon Greedy EXCEPT that you don't comput a p (probability) to compare against an epsilon value. Instead you simply work with the current best value at each iteration
#This actually compares the performance of epsilon-greedy against optimistic initial values

#Suppose we know the true mean of each Bandit is x < 10
#Pick a high ceiling as the initial mean estimate
import numpy as np
import matplotlib.pyplot as plt

class Bandit:
    
    def __init__ (self, m, n, limit):
        self.m = m
        self.mean = limit
        self.n = n
    
    def pull (self):
        return np.random.randn () + self.m
    
    def update (self, x):
        self.n += 1
        self.mean = (1.0 - (1.0 / self.n)) * self.mean + (1.0 / self.n) * x



def run (m1,m2,m3,epsilon,n):
    limit = 10.0
    bandits_optimistic = [Bandit (m1, 1, limit), Bandit (m2, 1, limit), Bandit (m3, 1, limit)]
    bandits_greedy = [Bandit (m1, 0, 0.0), Bandit (m2, 0, 0.0), Bandit (m3, 0, 0.0)]
    
    data_optimistic = np.empty (n)
    data_greedy = np.empty (n)
    #data = []
    
    for i in range (n):
        p = np.random.random ()
        if p < epsilon:
            j = np.random.choice (3)
        else:
            j = np.argmax ([b.mean for b in bandits_greedy])
        x = bandits_greedy [j].pull ()
        data_greedy [i] = x
        
        bandits_greedy [j].update (x)
    
    average_greedy = np.cumsum (data_greedy) / (np.arange (n) + 1)
    
    for i in range (n):
        j = np.argmax ([b.mean for b in bandits_optimistic])
        x = bandits_optimistic [j].pull ()
        data_optimistic [i] = x
        
        bandits_optimistic [j].update (x)
    
    average_optimistic = np.cumsum (data_optimistic) / (np.arange (n) + 1)
    #average = sum (data) / (float (n))
    
    plt.plot (average_greedy, label="Cumulative Greedy Avg")
    plt.xscale ("log")
    plt.title ("Greedy vs Optimistic Avg")
    '''
    plt.plot (bandits_greedy [0].mean, label="Bandit 1 Avg")
    plt.plot (bandits [1].mean, label="Bandit 2 Avg")
    plt.plot (bandits [2].mean, label="Bandit 3 Avg")
    plt.xscale ("log")
    plt.show ()
    '''
    plt.plot (average_optimistic, label = "Cumulative Optimistic Avg")
    plt.xscale ("log")
    #plt.title ("Optimistic Avg")
    plt.legend ()
    plt.show ()

if __name__ == "__main__":
    
    run (1.0,2.0,3.0,.10,100000)