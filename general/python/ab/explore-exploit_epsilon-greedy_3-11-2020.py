#3-11-2020 AI Reinforcement Learning - Udemy; Explore-Exploit Dilemma; Epsilon-Greedy Algorithm

import numpy as np
import matplotlib.pyplot as plt


class Bandit:
	
	def __init__ (self, m):
		
		self.m = m
		self.mean = 0.0
		self.n = 0
		
	def pull (self):
		
		return np.random.randn () + self.m
	
	def update (self, x):
		self.n += 1
		self.mean = (1.0 - (1.0/self.n)) * self.mean + (1.0/self.n) * x


def run (m1,m2,m3,epsilon,n):
	
	#Insantiate 3 Bandit objects
	bandits = [Bandit (m1), Bandit (m2), Bandit (m3)]
	
	#Create an array for storing the x value from each pull
	data = np.empty (n)
	
	for i in range (n):
		
		#Draw a random probability value
		p = np.random.random ()
		
		#If the random probability value is greater than epislon, then select a random Bandit
		if p < epsilon:
			j = np.random.choice (3)
		
		#If the random probability value is NOT greater than epsilon, select the Bandit with the current maximum mean value
		else:
			j = np.argmax ([b.mean for b in bandits])
		
		#Pull the arm of whichever Bandit has been selected, and then update that same Bandit with the REWARD just obtained
		x = bandits [j].pull ()
		bandits [j].update (x)
		
		data [i] = x
	
	#Compute Cumulative Average
	average = np.cumsum (data) / (np.arange (n) + 1)
	
	#Plot and Compare the MEANS of the 3 different Bandits against each other AND against the Cumulative Average
	plt.plot (average)
	plt.plot (np.ones (n) * m1)
	plt.plot (np.ones (n) * m2)
	plt.plot (np.ones (n) * m3)
	
	#Log scale allows fluctuations in earlier rounds to show more clearly
	plt.xscale ('log')
	
	plt.show ()
	
	
	#Print the Bandit MEAN values for debugging purposes
	for bandit in bandits:
		print ("Bandit Mean: ", bandit.mean, "\n\n")
		
	
	return average



if __name__ == '__main__':
    #Run the Explore-Exploit Greedy-Epsilon Bandit experiment for 3 different values of epsilon (1%, 5%, 10%)
    m1 = 1.0
    m2 = 2.0
    m3 = 3.0
    n = 100000
    
    c_01 = run (m1,m2,m3,.01,n)
    c_05 = run (m1,m2,m3,.05,n)
    c_10 = run (m1,m2,m3,.10,n)
    
    #Log plots of results
    plt.plot (c_01, label="eps .01 log")
    plt.plot (c_05, label="eps .05 log")
    plt.plot (c_10, label="eps .10 log")
    plt.legend ()
    plt.xscale ("log")
    plt.show ()
    
    #Linear plots of results
    plt.plot (c_01, label="eps .01 linear")
    plt.plot (c_05, label="eps .05 linear")
    plt.plot (c_10, label="eps .10 linear")
    plt.legend ()
    plt.show ()